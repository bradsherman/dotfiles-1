;; -*- lexical-binding: t -*-
(require 'package)
(setq package-list '(
                     magit
                     evil-magit
                     flycheck
                     python-mode
                     better-defaults
                     clojure-mode
                     cider
                     org
                     evil-org
                     paredit
                     evil-paredit
                     ))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

; fetch list of available packages
(unless package-archive-contents
  (package-refresh-contents))

; Install missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'evil)
(require 'evil-magit)
(evil-mode 1)

;; Install all packages
(defun install-all-packages ()
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package))))

; C-hjkl for window movement
(define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

 ;;; C-c as general purpose escape key sequence.
(defun my-esc (prompt)
  "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
  (cond
   ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
   ;; Key Lookup will use it.
   ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
   ;; This is the best way I could infer for now to have C-c work during evil-read-key.
   ;; Note: As long as I return [escape] in normal-state, I don't need this.
   ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
   (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-c") 'my-esc)
;; Works around the fact that Evil uses read-event directly when in operator state, which
;; doesn't use the key-translation-map.
(define-key evil-operator-state-map (kbd "C-c") 'keyboard-quit)

;; enable flycheck always
(global-flycheck-mode)

;; Python mode loading
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

;; Define prefix as c-c
;; Note: lexical-binding must be t in order for this to work correctly.
(defun make-conditional-key-translation (key-from key-to translate-keys-p)
       "Make a Key Translation such that if the translate-keys-p function returns true,
   key-from translates to key-to, else key-from translates to itself.  translate-keys-p
   takes key-from as an argument. "
       (define-key key-translation-map key-from
	 (lambda (prompt)
	   (if (funcall translate-keys-p key-from) key-to key-from))))
(defun my-translate-keys-p (key-from)
  "Returns whether conditional key translations should be active.  See make-conditional-key-translation function. "
   (or (evil-motion-state-p) (evil-normal-state-p) (evil-visual-state-p)))
(make-conditional-key-translation (kbd ",") (kbd "C-c") 'my-translate-keys-p)
(make-conditional-key-translation (kbd "g") (kbd "C-x") 'my-translate-keys-p)
(global-set-key (kbd "C-x C-x") 'beginning-of-buffer)

;; Clojure setup
;; Paredit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)

; No wrap 
(set-default 'truncate-lines t)

; org mode
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(require 'evil-org)

; Clojure major mode keybindings
(defun clojure-mode-config ()
  (local-set-key (kbd "C-x p") 'cider-eval-last-sexp))

(add-hook 'clojure-mode-hook 'clojure-mode-config)
